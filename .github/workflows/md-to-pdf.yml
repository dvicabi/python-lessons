name: MD ➜ PDF (Pixel-perfect GitHub style, RTL, Unicode)

on:
  push:
    branches: [ main ]
    paths:
      - '**.md'
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            xvfb \
            fonts-noto \
            fonts-noto-color-emoji \
            fonts-dejavu \
            culmus
          mkdir -p tools/mdpdf
          cd tools/mdpdf
          npm init -y
          npm pkg set type="commonjs"
          npm install --save-exact \
            md-to-pdf@5 \
            github-markdown-css@5 \
            highlight.js@11 \
            markdown-it@14 \
            markdown-it-footnote@3.0.3 \
            markdown-it-emoji@2.0.2

      - name: Write convert.js (with xvfb wrapper)
        run: |
          cat > tools/mdpdf/convert.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const { mdToPdf } = require('md-to-pdf');
          const MarkdownIt = require('markdown-it');
          const hljs = require('highlight.js');
          const mdFootnote = require('markdown-it-footnote');
          const mdEmoji = require('markdown-it-emoji');

          const md = new MarkdownIt({
            html: true,
            linkify: true,
            highlight: (code, lang) => {
              try {
                if (lang && hljs.getLanguage(lang)) {
                  return `<pre><code class="hljs language-${lang}">` +
                         hljs.highlight(code, { language: lang }).value +
                         '</code></pre>';
                }
              } catch {}
              return `<pre><code class="hljs">${code}</code></pre>`;
            }
          }).use(mdFootnote).use(mdEmoji);

          const isRTL = (s) => /[\u0590-\u05FF]/.test(s);

          function wrapHtml(body, rtl) {
            const dir = rtl ? 'rtl' : 'ltr';
            return `<!doctype html>
            <html dir="${dir}" lang="${rtl ? 'he' : 'en'}">
            <head>
              <meta charset="utf-8">
              <link rel="stylesheet" href="node_modules/github-markdown-css/github-markdown.css">
              <style>
                body { font-family: "Noto Sans Hebrew", "Noto Sans", sans-serif; }
                .markdown-body { box-sizing: border-box; padding: 20px; }
                html[dir=rtl] .markdown-body { direction: rtl; text-align: right; }
              </style>
            </head>
            <body><article class="markdown-body">${body}</article></body>
            </html>`;
          }

          function* walk(dir) {
            for (const e of fs.readdirSync(dir, { withFileTypes: true })) {
              const f = path.join(dir, e.name);
              if (e.isDirectory()) yield* walk(f);
              else if (e.isFile() && f.endsWith('.md') && !f.includes('node_modules') && !f.includes('.git'))
                yield f;
            }
          }

          (async () => {
            const root = path.resolve(__dirname, '../..');
            const files = [...walk(root)];
            console.log('Found', files.length, 'markdown files');
            let ok=0, fail=0;
            for (const file of files) {
              try {
                const mdText = fs.readFileSync(file, 'utf8');
                const html = wrapHtml(md.render(mdText), isRTL(mdText));
                const out = file.replace(/\.md$/, '.pdf');
                const res = await mdToPdf({ content: html, filePath: file }, {
                  as_html: true,
                  launch_options: { args: ['--no-sandbox'] },
                  pdf_options: { format: 'A4', printBackground: true }
                });
                if (res && res.pdf) {
                  fs.writeFileSync(out, res.pdf);
                  console.log('✅', out);
                  ok++;
                } else { console.log('⚠️ no PDF:', file); fail++; }
              } catch (e) {
                console.error('❌', file, e.message);
                fail++;
              }
            }
            console.log('OK:', ok, ' FAIL:', fail);
            if (ok===0) process.exit(1);
          })();
          EOF

      - name: Convert Markdown → PDF under xvfb
        run: |
          cd tools/mdpdf
          xvfb-run -a node convert.js

      - name: Upload PDFs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: md-pdfs
          path: '**/*.pdf'
          if-no-files-found: error
